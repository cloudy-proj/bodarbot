
// EXPORTS

const { addMethods } = require('telebot');
const TeleBot = require('telebot');

const bot = new TeleBot("1761355313:AAG-bKTHdZOwe5Vj54xTLbMdy5BWrcUYNg4");

// const myModule = require('./m');
// let val = myModule.ass1; // val is "Hello"   

var getUserByID = (id) => {
  let i = users.findIndex((element, j) => {
    return users[j]["id"] == id
  });
   return  users[i];
}
var updateDb = (user) => { 
  users.push(user);
  console.log(users);
};

// [${msg.from.first_name}](tg://user?id=${msg.from.id})


// `
// {
//     id: 251196883,
//     is_bot: false,
//     first_name: 'üÖ∞Ô∏èüÖ±Ô∏èüÖæÔ∏èüÖ±Ô∏èüÖ∞Ô∏è',
//     username: 'zeqaf',
//     language_code: 'uk'
// }
// `


// TEXT

const mainMenuText = "–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ\n1. –†–æ–∑–ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫üîé\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞üìù";

//  KEYBOARDS

let inSearch = (msgOld) => {
   
}

let myProfile = (msgOld) => {

  let inMyProfile = true;
  let user = getUserByID(msgOld.from.id);
  // console.log(user);  
  bot.sendPhoto(user["id"], user.photo, {
    caption: `–Ü–º'—è: [${user["name"]}](tg://user?id=${user["id"]})\n\n–í—ñ–∫: ${user["age"]} \n\n–û–ø–∏—Å: ${user["description"]}\n\n–°—Ç–∞—Ç—å: ${user["gender"] == "male"? "—á–æ–ª–æ–≤—ñ—á–∞":"–∂—ñ–Ω–æ—á–∞"}\n\n–®—É–∫–∞—é: ${user["looking_for"] == "male"? "—Ö–ª–æ–ø—Ü—è" :  user["looking_for"] == "both"? "–±–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" : "–¥—ñ–≤—á–∏–Ω—É"}`
    ,
    parseMode: "Markdown"
    ,
    replyMarkup: {
      keyboard: [ ["–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"] ],
      resize_keyboard: true,
      one_time_keyboard: true
    } 
  });
}
              

let mainMenu = (msgOld) => {
  
  let inMenu = true;
  let userId = msgOld.from.id;
  bot.sendMessage(userId, mainMenuText, {
    replyMarkup: {
      keyboard: [ ["1", "2"] ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
  bot.on("*", (msg) => {
    if (msg.from.id == userId && inMenu && msg.text != "–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") {
      if (msg.text == "1") {
        inMenu = false;
        inSearch(msg);
      }
      else if(msg.text == "2") {
        inMenu = false;
        myProfile(msg);
      }
      else {
        bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.");
        setTimeout(() => {
          bot.sendMessage(msg.from.id, mainMenuText, {
            replyMarkup: {
              keyboard: [ ["1", "2"] ],
              resize_keyboard: true,
              one_time_keyboard: true
            }
          });
        }, 500);
      }
    }
  })
};

bot.on("/start", (msg) => {
     
     bot.sendMessage(msg.from.id, `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}!\n–Ø BodArBot —ñ —è –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É! –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É —ñ –ø–æ–≥–Ω–∞–ª–∏!`, {
         replyMarkup: {
         keyboard: [
          [
            {
              text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å!', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            }
          ]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
         }   
     });
}); 

bot.on(/–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å!/, (msg) => {
  
  // bot.sendMessage(msg.from.id, `–ß—É–¥–æ–≤–æ! –î–∞–≤–∞–π —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –¢–≤–æ—î —ñ–º'—è?`);
  if (msg.from.username == undefined) {
    bot.sendMessage(msg.from.id, "–í–∏–±–∞—á, –∞–ª–µ —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –≤ —Ç–µ–±–µ –º–∞—î –±—É—Ç–∏ –ø—Å–µ–≤–¥–æ–Ω—ñ–º, –∞–ª–µ –π–æ–≥–æ –Ω–µ–º–∞—î üòî\n[–û—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏](https://youtu.be/RtxySv4ANDU?t=23)", {
      parseMode: "Markdown",
      replyMarkup: {
        keyboard: [
          ["–í—Å–µ, –ø—Å–µ–≤–¥–æ–Ω—ñ–º —Å—Ç–≤–æ—Ä–∏–≤!"]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    })
  }
  else {
    registration(msg);
  }
});

bot.on([/–í—Å–µ, –ø—Å–µ–≤–¥–æ–Ω—ñ–º —Å—Ç–≤–æ—Ä–∏–≤!/, /–í—Å–µ, —Ç–µ–ø–µ—Ä —Ç–æ—á–Ω–æ!/], (msg) => {
  if (msg.from.username == undefined) {
    bot.sendMessage(msg.from.id, "–ô–æ–≥–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î...", {
      parseMode: "Markdown",
      replyMarkup: {
        keyboard: [
          ["–í—Å–µ, —Ç–µ–ø–µ—Ä —Ç–æ—á–Ω–æ!"]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    })
  }
  else {
    registration(msg);
  }
});


let registration = (msgOld) => {

  let step = 0;
  let userId = msgOld.from.id;
  let user = {
    "id": "" + msgOld.from.id,
    "active": true,
    // 0: notStarted | 1: main menu | 2: my info | 3: search | 4: registration
    "name": "",
    "login": msgOld.from.username,
    "age": 0,
    "gender": "",
    "looking_for": "",
    "description": "",
    "photo": "",
    "history": {    }
  }

  bot.on("*", (msg) => {
    if (msg.from.id == userId && step < 8) {
      if (msg.text != undefined || step == 4 || step == 3) {

        switch (step){
          case 0:
            bot.sendMessage(userId, `–ß—É–¥–æ–≤–æ! –î–∞–≤–∞–π —Ä–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –¢–≤–æ—î —ñ–º'—è?`, {
              replyMarkup: {
                keyboard: [
                  [
                  { text: msg.from.first_name }
                  ]
                ],
                resize_keyboard: true,
                one_time_keyboard: true
              }
            });
            step++;
            break;
          case 1:
            user["name"] = msg.text;
            step++;
            bot.sendMessage(msg.from.id, `–ê–≥–∞, –¥–∞–ª—ñ. –¢–≤—ñ–π –≤—ñ–∫?`, {
              replyMarkup: {
                remove_keyboard: true
              }
            });
            break;
          case 2:
            if (parseInt(msg.text) < 1 || parseInt(msg.text) > 120 || parseInt(msg.text) == NaN) {
              bot.sendMessage(msg.from.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫, —Å–ø—Ä–æ–±—É–π –ø–æ —ñ–Ω—à–æ–º—É!")
            }
            else {
              user["age"] = parseInt(msg.text);
              bot.sendMessage(msg.from.id, `–¢–∞–∫, –∑–∞–ø–∏—Å–∞–≤... ${user["name"]}, ${user["age"]}. –¢–µ–ø–µ—Ä —Ä–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ.`, {
                replyMarkup: {
                  keyboard: [
                    [
                    { text: "–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø—É—Å—Ç–∏–º" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
              
              step++;
            }
            break;
          case 3:
            if (!msg.text) {
              bot.sendMessage(msg.from.id, `–ù–∞–ø–∏—à–∏ —â–æ—Å—å –ø—Ä–æ —Å–µ–±–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.`);
            }
            else if (msg.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø—É—Å—Ç–∏–º") {
              user["description"] = "";
              bot.sendMessage(msg.from.id, `–û–∫–µ–π, –π–¥–µ–º –¥–∞–ª—ñ. –¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—î —Ñ–æ—Ç–æ`, {
                replyMarkup: {
                  keyboard: [
                    [
                      { text: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∞–≤–∞—Ç–∞—Ä–∫–∏" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
              step++;
            }
            else {
              user["description"] = msg.text;
              bot.sendMessage(msg.from.id, `–¢–µ–ø–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—î —Ñ–æ—Ç–æ`, {
                replyMarkup: {
                  keyboard: [
                    [
                      { text: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∞–≤–∞—Ç–∞—Ä–∫–∏" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
              step++;
            }
            break;
          case 4:
            if (msg["photo"] != undefined) {
              user["photo"] = msg["photo"][0]["file_id"];
              step++;
              bot.sendMessage(msg.from.id, "–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–≤, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å", {
                replyMarkup: {
                  keyboard:  [
                    ["–Ø —á–æ–ª–æ–≤—ñ–∫","–Ø –¥—ñ–≤—á–∏–Ω–∞"]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
            }
            else if (msg["text"] == "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ –∞–≤–∞—Ç–∞—Ä–∫–∏") {
              var user_profile = bot.getUserProfilePhotos(msg.from.id);
              // console.log(user_profile);
              step++;
              user_profile.then(function (res) {
                var file_id = res.photos[0][0].file_id;
                user["photo"] = file_id;
                bot.sendMessage(msg.from.id, "–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å", {
                  replyMarkup: {
                    keyboard:  [
                      ["–Ø —á–æ–ª–æ–≤—ñ–∫","–Ø –¥—ñ–≤—á–∏–Ω–∞"]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                  }
                });
              });
            }
            else {
              bot.sendMessage(msg.from.id, "–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± —è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Ñ–æ—Ç–æ —Ç–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º ü•∫") ;
            }
            break;
          case 5:
            if (msg.text == "–Ø —á–æ–ª–æ–≤—ñ–∫") {
              user["gender"] = "male";
              step++;
              bot.sendMessage(msg.from.id, "–ö–æ–≥–æ —à—É–∫–∞—î—à?", {
                replyMarkup: {
                  keyboard: [
                    [
                      { text: "–ß–æ–ª–æ–≤—ñ–∫—ñ–≤" }, { text: "–î—ñ–≤—á–∞—Ç" }, { text: "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
            }
            else if (msg.text == "–Ø –¥—ñ–≤—á–∏–Ω–∞") {
              user["gender"] = "female";
              step++;
              bot.sendMessage(msg.from.id, "–ö–æ–≥–æ —à—É–∫–∞—î—à?", {
                replyMarkup: {
                  keyboard: [
                    [
                      { text: "–ß–æ–ª–æ–≤—ñ–∫—ñ–≤" }, { text: "–î—ñ–≤—á–∞—Ç" }, { text: "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
            }
            else {
              bot.sendMessage(msg.from.id, "–ù–∞—Ç–∏—Å–Ω–∏ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫, –±—É–¥—å –ª–∞—Å–∫–∞");
            }
            break;
          case 6:
            if (msg.text == "–ß–æ–ª–æ–≤—ñ–∫—ñ–≤" || msg.text == "–î—ñ–≤—á–∞—Ç" || msg.text == "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ") {
              if (msg.text == "–ß–æ–ª–æ–≤—ñ–∫—ñ–≤") user["looking_for"] = "male";              
              else if(msg.text == "–î—ñ–≤—á–∞—Ç") user["looking_for"] = "female";              
              else if (msg.text == "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ") user["looking_for"] = "both";
              bot.sendMessage(msg.from.id, "–í—Å–µ, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–∫—ñ–Ω—á–µ–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –î–æ—Ä–µ—á—ñ, –æ—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:");
              setTimeout(() => {
                console.log(user.photo);
                bot.sendPhoto(msg.from.id, user.photo, {
                  caption: `[${user.name}](tg://user?id=${msg.from.id})  -  ${user.age} \n\n${user.description}`,
                  parseMode: "Markdown",
                  replyMarkup: {
                    keyboard: [ ["–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"] ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                  }
                });
              }, 1000);
              updateDb(user);
              step++;
            }
            else {
              bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–≥–æ —Ç–∏ —à—É–∫–∞—î—à", {
                replyMarkup: {
                  keyboard: [
                    [
                      { text: "–ß–æ–ª–æ–≤—ñ–∫—ñ–≤" }, { text: "–î—ñ–≤—á–∞—Ç" }, { text: "–ë–µ–∑ —Ä—ñ–∑–Ω–∏—Ü—ñ" }
                    ]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              });
            }
            break;
          case 7:
            mainMenu(msg);
            step++;
            break;
        }
      }
      else {
        bot.sendMessage(msg.from.id, "–ù–µ –¥—É–∂–µ —Ä–æ–∑—É–º—ñ—é –ø—Ä–æ —â–æ —Ç–∏ üòî")
      }
    }
});

}




bot.on(/show*/, (msg) => {
  // bot.getUserProfilePhotos(msg.from.id).then(result => console.log(result['photos'][0][0]['file_id']));
});


bot.start();

var users= [
    // { 
    //   "id": "",
    //   "active": true,
    //    // 0: notStarted | 1: main menu | 2: my info | 3: search | 4: registration
    //   "name": "",
    //   "login": "",
    //   "age": 0,
    //   "gender": "",
    //   "looking_for": "",
    //   "description": "",
    //   "photo": "",
    //   "history": {
    //       "id1": true,
    //       "id2": false
    //   }
    // }
];

